{"version":3,"sources":["../../../src/@ionic-native/plugins/ionic-native-bluetoothle/BluetoothLeHelper.ts"],"names":[],"mappings":"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","file":"BluetoothLeHelper.js","sourceRoot":"","sourcesContent":["import { BluetoothLe } from './BluetoothLe'\nimport { Injectable } from '@angular/core'\nimport { take, map, filter } from 'rxjs/operators'\nimport { Observable } from 'rxjs'\nimport { ScanResult } from './models/BleModels'\nimport { timeoutPromiseWithError } from '@dodoinblue/promiseutils'\n\nconst DEFAULT_OPERATION_TIMEOUT = 5000 // ms\nexport interface IConnectionStatus {\n  name: string\n  address: string\n  status: 'connected' | 'disconnected'\n}\n\n\nexport class BluetoothLeHelper {\n\n  bluetoothle: BluetoothLe\n  constructor () {\n    this.bluetoothle = new BluetoothLe()\n  }\n\n  initialize (): Promise<boolean> {\n    return this.bluetoothle.initialize().pipe(\n      take(1),\n      map(result => result.status === 'enabled')\n    ).toPromise()\n  }\n\n  // enable (): Promise<boolean>\n  // disable (): Promise<boolean>\n\n  getAdaptorInfo () {\n    return this.bluetoothle.getAdapterInfo()\n  }\n\n  startScan (services: string[]): Observable<ScanResult> {\n    let scanParams = { 'services': services }\n    return this.bluetoothle.startScan(scanParams).pipe(\n      filter(result => result && result.status === 'scanResult'),\n      map(result => {\n        return {\n          address: result.address,\n          name: result.name,\n          rssi: result.rssi,\n          advertisement: result.advertisement\n        }\n      })\n    )\n  }\n\n  stopScan (): Promise<boolean> {\n    return this.bluetoothle.stopScan().then(result => result.status === 'scanStopped')\n  }\n\n  retrieveConnected (services: string[]) {\n    return this.bluetoothle.retrieveConnected({ 'services': services })\n  }\n\n  bond (address: string): Promise<boolean> {\n    return timeoutPromiseWithError(this.bluetoothle.bond({ 'address': address }).pipe(\n      filter(result => result.status === 'bonded'),\n      take(1)\n    ).toPromise(), DEFAULT_OPERATION_TIMEOUT)\n  }\n\n  unbond (address: string): Promise<boolean> {\n    return timeoutPromiseWithError(this.bluetoothle.unbond({ 'address': address }).pipe(\n      filter(result => result.status === 'unbonded'),\n      take(1)\n    ).toPromise(), DEFAULT_OPERATION_TIMEOUT)\n  }\n\n  // connect (address): Promise<Observable<IConnectionStatus>> {\n  //   let connectionStatusSubject = new Subject<IConnectionStatus>()\n  //   let deferred = new Deferred<Observable<IConnectionStatus>>()\n  //   this.bluetoothle.connect({ 'address': address }).pipe(tap(result => console.log('===CONNECTION STATUS:' + JSON.stringify(result))))\n  //     .subscribe(result => {\n  //       connectionStatusSubject.next(result)\n  //       if (result.status === 'connected') {\n  //         deferred.resolve(connectionStatusSubject.asObservable())\n  //       }\n  //     })\n\n  //   return timeoutPromiseWithError(deferred.promise, DEFAULT_OPERATION_TIMEOUT)\n  // }\n\n  connect (address: string): Observable<IConnectionStatus> {\n    return this.bluetoothle.connect({ 'address': address })\n  }\n\n  reconnect (address: string): Promise<boolean> {\n    return this.bluetoothle.reconnect({ 'address': address }).then(result => result.status === 'connected')\n  }\n\n  disconnect (address: string): Promise<boolean> {\n    return this.bluetoothle.disconnect({ 'address': address }).then(result => result.status === 'disconnected')\n  }\n\n  close (address: string): Promise<boolean> {\n    return this.bluetoothle.close({ 'address': address }).then(result => result.status === 'closed')\n  }\n\n  discover (address: string): Promise<{\n    uuid: string,\n    characteristics: {\n      uuid: string,\n      descriptors: any[]\n    }[]\n  }[]> {\n    return this.bluetoothle.discover({ 'address': address, 'clearCache': true }).then(result => result.services)\n  }\n\n  read (address: string, service: string, characteristic: string): Promise<Uint8Array> {\n    return this.bluetoothle.read({\n      'address': address,\n      'service': service,\n      'characteristic': characteristic\n    }).then(result => this.bluetoothle.encodedStringToBytes(result.value))\n  }\n\n  write (address: string, service: string, characteristic: string, cmd: Uint8Array, withoutResponse: boolean): Promise<boolean> {\n    let writeParams = {\n      'address': address,\n      'service': service,\n      'characteristic': characteristic,\n      'value': this.bluetoothle.bytesToEncodedString(cmd)\n    } as any\n    if (withoutResponse) {\n      writeParams.type = 'noResponse'\n    }\n    return Promise.resolve().then(() => {\n      this.bluetoothle.write(writeParams)\n    }).then(result => {\n      // console.log(`write response: ${result}`)\n      return true\n    })\n  }\n\n  subscribe (address: string, service: string, characteristic: string): Observable<Uint8Array> {\n    return this.bluetoothle.subscribe({\n      'address': address,\n      'service': service,\n      'characteristic': characteristic\n    }).pipe(\n      filter(result => result.status === 'subscribedResult'),\n      map(result => result.value),\n      map(b64 => this.bluetoothle.encodedStringToBytes(b64))\n    )\n  }\n\n  unsubscribe (address: string, service: string, characteristic: string): Promise<boolean> {\n    return this.bluetoothle.unsubscribe({\n      'address': address,\n      'service': service,\n      'characteristic': characteristic\n    }).then(result => result.status === 'unsubscribed')\n  }\n\n  rssi (address: string): Promise<number> {\n    return this.bluetoothle.rssi({ 'address': address }).then(result => result.rssi)\n  }\n\n  mtu (address: string, mtu: number): Promise<number> {\n    return this.bluetoothle.mtu({ 'address': address, 'mtu': mtu }).then(result => result.mtu)\n  }\n\n  requestConnectionPriority (address: string, connectionPriority: 'low' | 'balanced' | 'high'): Promise<boolean> {\n    return this.bluetoothle.requestConnectionPriority({\n      'address': address,\n      'connectionPriority': connectionPriority\n    }).then(result => result.status === 'connectionPriorityRequested')\n  }\n\n  isInitialized (): Promise<boolean> {\n    return this.bluetoothle.isInitialized().then(result => result.isInitialized)\n  }\n\n  isEnabled (): Promise<boolean> {\n    return this.bluetoothle.isEnabled().then(result => result.isEnabled)\n  }\n\n  isScanning (): Promise<boolean> {\n    return this.bluetoothle.isScanning().then(result => result.isScanning)\n  }\n\n  isBonded (address: string): Promise<boolean> {\n    return this.bluetoothle.isBonded({ 'address': address }).then(result => result.isBonded)\n  }\n\n  wasConnected (address: string): Promise<boolean> {\n    return this.bluetoothle.wasConnected({ 'address': address }).then(result => result.wasConnected)\n  }\n\n  isConnected (address: string): Promise<boolean> {\n    return this.bluetoothle.isConnected({ 'address': address }).then(result => result.isConnected)\n  }\n\n  isDiscovered (address: string): Promise<boolean> {\n    return this.bluetoothle.isDiscovered({ 'address': address }).then(result => result.isDiscovered)\n  }\n\n  hasPermission (): Promise<boolean> {\n    return this.bluetoothle.hasPermission().then(result => result.hasPermission)\n  }\n\n  requestPermission (): Promise<boolean> {\n    return this.bluetoothle.requestPermission().then(result => result.requestPermission)\n  }\n\n  isLocationEnabled (): Promise<boolean> {\n    return this.bluetoothle.isLocationEnabled().then(result => result.isLocationEnabled)\n  }\n\n  requestLocation (): Promise<boolean> {\n    return this.bluetoothle.requestLocation().then(result => result.requestLocation)\n  }\n\n  bytesToEncodedString (bytes: Uint8Array): string {\n    return this.bluetoothle.bytesToEncodedString(bytes)\n  }\n\n  encodedStringToBytes (s: string): Uint8Array {\n    return this.bluetoothle.encodedStringToBytes(s)\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}