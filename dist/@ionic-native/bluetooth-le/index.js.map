{"version":3,"sources":["../../../src/@ionic-native/plugins/bluetooth-le/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["/**\n * This is a template for new plugin wrappers\n *\n * TODO:\n * - Add/Change information below\n * - Document usage (importing, executing main functionality)\n * - Remove any imports that you are not using\n * - Add this file to /src/index.ts (follow style of other plugins)\n * - Remove all the comments included in this template, EXCEPT the @Plugin wrapper docs and any other docs you added\n * - Remove this note\n *\n */\nimport { Injectable } from '@angular/core';\nimport { Plugin, Cordova, CordovaProperty, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\nimport { InitParams, ScanParams, RetrieveConnectedParams, AddressParams, ConnectParams, DiscoverParams, ServicesDiscoverParams, CharacteristicsDiscoverParams, CharacteristicPath } from './models/BlePluginParams'\n\n/**\n * @name Bluetooth Le\n * @description\n * This plugin does something\n *\n * @usage\n * ```typescript\n * import { BluetoothLe } from '@ionic-native/bluetooth-le';\n *\n *\n * constructor(private bluetoothLe: BluetoothLe) { }\n *\n * ...\n *\n *\n * this.bluetoothLe.functionName('Hello', 123)\n *   .then((res: any) => console.log(res))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'BluetoothLePlugin',\n  plugin: 'cordova-plugin-bluetoothle',\n  pluginRef: 'bluetoothle',\n  repo: 'https://github.com/randdusing/cordova-plugin-bluetoothle',\n  platforms: ['Android', 'iOS']\n})\n\nexport class BluetoothLe extends IonicNativePlugin {\n\n  // /**\n  //  * This function does something\n  //  * @param arg1 {string} Some param to configure something\n  //  * @param arg2 {number} Another param to configure something\n  //  * @return {Promise<any>} Returns a promise that resolves when something happens\n  //  */\n  // @Cordova()\n  // functionName(arg1: string, arg2: number): Promise<any> {\n  //   return; // We add return; here to avoid any IDE / Compiler errors\n  // }\n  /**\n     * Initialize Bluetooth on the device. Must be called before anything else. Observable will \n     * continuously be used whenever Bluetooth is enabled or disabled & gatt server events.\n     * @param params @see InitParams\n     */\n  @Cordova({\n    callbackOrder: 'reverse',\n    callbackStyle: 'object',\n    observable: true\n  })\n  initialize(params?: InitParams): Observable<{ status: 'enabled' | 'disabled', message?: string }> {\n    return\n  }\n\n  /**\n   * Android only\n   * Enable Bluetooth on the device. Android support only. Listen to initialize callbacks for change in\n   * Bluetooth state. A successful enable will return a status => enabled via initialize success callback.\n   */\n  @Cordova({ callbackOrder: 'reverse', sync: true })\n  enable() {\n    return\n  }\n\n  /**\n   * Android only\n   * Disable Bluetooth on the device. Android support only. Listen to initialize callbacks for change in\n   * Bluetooth state. A successful disable will return an error => enable via initialize error callback.\n   */\n  @Cordova({ callbackOrder: 'reverse', sync: true })\n  disable() {\n    return\n  }\n\n  /**\n   * Android only\n   * Retrieve useful information such as the address, name, and various states\n   * (initialized, enabled, scanning, discoverable). \n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  getAdapterInfo(): Promise<{\n    name: string\n    address: string\n    isInitialized: boolean\n    isEnabled: boolean\n    isScanning: boolean\n    isDiscoverable: boolean\n  }> {\n    return\n  }\n\n  /**\n   * Scan for Bluetooth LE devices. Since scanning is expensive, stop as soon as possible.\n   * The Cordova app should use a timer to limit the scan interval. Also, Android uses an AND \n   * operator for filtering, while iOS uses an OR operator. Android API >= 23 requires \n   * ACCESS_COARSE_LOCATION permissions to find unpaired devices. Permissions can be requested \n   * by using the hasPermission and requestPermission functions. Android API >= 23 also requires \n   * location services to be enabled. Use isLocationEnabled to determine whether location services \n   * are enabled. If not enabled, use requestLocation to prompt the location services settings page.\n   * @param params @see ScanParams\n   */\n  @Cordova({ callbackOrder: 'reverse', observable: true })\n  startScan(params?: ScanParams):\n\n    Observable<{\n      status: 'scanResult' | 'scanStarted',\n      advertisement?: string | any,\n      rssi?: number,\n      name?: string,\n      address?: string\n    }> {\n    return\n  }\n\n  /**\n   * Stop scan for Bluetooth LE devices. Since scanning is expensive, stop as soon as possible. \n   * The app should use a timer to limit the scanning time.\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  stopScan(): Promise<{ status: 'scanStopped' }> {\n    return\n  }\n\n  /**\n   * Retrieved paired Bluetooth LE devices.\n   * @param params services to look for\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  retrieveConnected(params?: RetrieveConnectedParams): Promise<Array<{\n    name: string,\n    address: string\n  }>> {\n    return\n  }\n\n  /**\n   * Android only. Bond with a device. The first success callback should always return with \n   * status == bonding. If the bond is created, the callback will return again with \n   * status == bonded. If the bonding popup is canceled or the wrong code is entered, \n   * the callback will return again with status == unbonded\n   * @param params address of the device\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n    observable: true\n  })\n  bond(params?: AddressParams): Observable<{\n    name: string,\n    address: string,\n    status: 'bonded' | 'bonding' | 'unbonded'\n  }> {\n    return\n  }\n\n  /**\n   * Android only\n   * @param params \n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n    observable: true\n  })\n  unbond(params?: AddressParams): Observable<{\n    name: string,\n    address: string,\n    status: 'unbonded'\n  }> {\n    return\n  }\n\n  /**\n   * Connect to a Bluetooth LE device. The app should use a timer to limit the\n   * connecting time in case connecting is never successful. Once a device is \n   * connected, it may disconnect without user intervention. The original connection \n   * callback will be called again and receive an object with status => disconnected. \n   * @param params @see ConnectParams\n   */\n  @Cordova({ callbackOrder: 'reverse', observable: true })\n  connect(params: ConnectParams): Observable<{\n    name: string,\n    address: string,\n    status: 'connected' | 'disconnected'\n  }> {\n    return\n  }\n\n  /**\n   * Reconnect to a previously connected Bluetooth device.\n   * The app should use a timer to limit the connecting time.\n   * If a timeout occurs, the reconnection attempt should be canceled\n   * using disconnect() or close().\n   * @param params @see AddressParams\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  reconnect(params: AddressParams): Promise<{\n    name: string,\n    address: string,\n    status: 'connected' | 'disconnected'\n  }> {\n    return\n  }\n\n  /**\n   * Disconnect from a Bluetooth LE device. It's simpler to just call close(). \n   * Starting with iOS 10, disconnecting before closing seems required!\n   * @param params @see AddressParams\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  disconnect(params: AddressParams): Promise<{\n    address: string,\n    name: string\n    status: 'disconnected',\n  }> {\n    return\n  }\n\n  /**\n   * Close/dispose a Bluetooth LE device. Prior to 2.7.0, you needed to disconnect to the \n   * device before closing, but this is no longer the case. Starting with iOS 10, \n   * disconnecting before closing seems required!\n   * @param params @see AddressParams\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  close(params: AddressParams): Promise<{\n    address: string,\n    name: string\n    status: 'closed',\n  }> {\n    return\n  }\n\n  /**\n   * Discover all the devices services, characteristics and descriptors. Doesn't need to be \n   * called again after disconnecting and then reconnecting. If using iOS, you shouldn't use\n   * discover and services/characteristics/descriptors on the same device. \n   * @param params @see DiscoverParams\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  discover(params: DiscoverParams): Promise<{\n    status: string,\n    address: string,\n    name: string,\n    services: {\n      uuid: string,\n      characteristics: {\n        uuid: string,\n        descriptors: any[]\n      }[]\n    }[]\n  }> {\n    return\n  }\n\n  /**\n   * iOS only\n   * Discover the device's services. Not providing an array of services will return\n   * all services and take longer to discover. iOS support only.\n   * @param params @see ServicesDiscoverParams\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  services(params: ServicesDiscoverParams): Promise<{\n    status: 'services',\n    services: string[],\n    name: string,\n    address: string\n  }> {\n    return\n  }\n\n  /**\n   * iOS only\n   * Discover the service's characteristics. Not providing an array of characteristics \n   * will return all characteristics and take longer to discover. iOS support only.\n   * @param params @see CharacteristicsDiscoverParams\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  characteristics(params: CharacteristicsDiscoverParams): Promise<{\n    status: 'characteristics',\n    characteristics: [{\n      properties: any,\n      uuid: string\n    }],\n    name: string,\n    service: string,\n    address: string\n  }> {\n    return\n  }\n\n  /**\n   * iOS only\n   * Discover the characteristic's descriptors. iOS support only.\n   * @param params\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  descriptors(params: {\n    address: string,\n    service: string,\n    characteristic: string\n  }): Promise<{\n    status: 'descriptors',\n    descriptors: string[]\n    characteristics: string,\n    name: string,\n    service: string,\n    address: string\n  }> {\n    return\n  }\n\n  /**\n   * Read a particular service's characteristic once.\n   * @param params CharacteristicPath\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  read(params: CharacteristicPath): Promise<{ value: string, name: string, status: 'read' } & CharacteristicPath> {\n    return\n  }\n\n  /**\n   * Subscribe to a particular service's characteristic. Once a subscription is no \n   * longer needed, execute unsubscribe in a similar fashion.\n   * @param params CharacteristicPath\n   */\n  @Cordova({ callbackOrder: 'reverse', observable: true })\n  subscribe(params: CharacteristicPath): Observable<{ status: 'subscribed' | 'subscribedResult', value: string }> {\n    return\n  }\n\n  /**\n   * Unsubscribe to a particular service's characteristic.\n   * @param params \n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  unsubscribe(params: CharacteristicPath): Promise<{ status: 'unsubscribed', name: string } & CharacteristicPath> {\n    return\n  }\n\n  /**\n   * Write a particular service's characteristic.\n   * Note, no callback will occur on write without response on iOS.\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  write(params: ({\n    value: string,\n    type?: 'noResponse'\n  } & CharacteristicPath)): Promise<{ status: 'written', value?: string } & CharacteristicPath> | void {\n    return\n  }\n\n  /**\n   * This is experimental. Write Quick / Queue, use this method to quickly execute write without response commands\n   * when writing more than 20 bytes at a time.\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  writeQ(params: ({\n    value: string,\n    type?: 'noResponse'\n  } & CharacteristicPath)): Promise<{ status: 'written', value?: string } & CharacteristicPath> | void {\n    return\n  }\n\n  @Cordova({ callbackOrder: 'reverse' })\n  rssi(params: AddressParams): Promise<{\n    status: 'rssi',\n    rssi: number,\n    name: string,\n    address: string\n  }> {\n    return\n  }\n\n  /**\n   * Android 5+ only\n   * Set MTU of a connected device. Android only.\n   * @param params\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  mtu(params: { mtu: number } & AddressParams): Promise<{\n    status: 'mtu',\n    mtu: number,\n    name: string,\n    address: string\n  }> {\n    return\n  }\n\n  /**\n   * Android 5+ only\n   * @param params \n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  requestConnectionPriority(params: { connectionPriority: 'low' | 'balanced' | 'high' } & AddressParams): Promise<{\n    status: 'connectionPriorityRequested',\n    name: string,\n    address: string\n  }> {\n    return\n  }\n\n  @Cordova({ callbackOrder: 'reverse' })\n  isInitialized(): Promise<{ isInitialized: boolean }> {\n    return\n  }\n\n  @Cordova({ callbackOrder: 'reverse' })\n  isEnabled(): Promise<{ isEnabled: boolean }> {\n    return\n  }\n\n  @Cordova({ callbackOrder: 'reverse' })\n  isScanning(): Promise<{ isScanning: boolean }> {\n    return\n  }\n\n  @Cordova({ callbackOrder: 'reverse' })\n  isBonded(params: AddressParams): Promise<{ isBonded: boolean }> {\n    return\n  }\n\n  @Cordova({ callbackOrder: 'reverse' })\n  wasConnected(params: AddressParams): Promise<{ wasConnected: boolean }> {\n    return\n  }\n\n  @Cordova({ callbackOrder: 'reverse' })\n  isConnected(params: AddressParams): Promise<{ isConnected: boolean }> {\n    return\n  }\n\n  @Cordova({ callbackOrder: 'reverse' })\n  isDiscovered(params: AddressParams): Promise<{ isDiscovered: boolean }> {\n    return\n  }\n\n  /**\n   * Android 6+\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  hasPermission(): Promise<{ hasPermission: boolean }> {\n    return\n  }\n\n  /**\n   * Android 6+\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  requestPermission(): Promise<{ requestPermission: boolean }> {\n    return\n  }\n\n  /**\n   * Android 6+\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  requestLocation(): Promise<{ requestLocation: boolean }> {\n    return\n  }\n\n  /**\n   * Android 6+\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  isLocationEnabled(): Promise<{ isLocationEnabled: boolean }> {\n    return\n  }\n\n  @CordovaProperty\n  SCAN_MODE_OPPORTUNISTIC: number\n  @CordovaProperty\n  SCAN_MODE_LOW_POWER: number\n  @CordovaProperty\n  SCAN_MODE_BALANCED: number\n  @CordovaProperty\n  SCAN_MODE_LOW_LATENCY: number\n  @CordovaProperty\n  MATCH_NUM_ONE_ADVERTISEMENT: number\n  @CordovaProperty\n  MATCH_NUM_FEW_ADVERTISEMENT: number\n  @CordovaProperty\n  MATCH_NUM_MAX_ADVERTISEMENT: number\n  @CordovaProperty\n  MATCH_MODE_AGGRESSIVE: number\n  @CordovaProperty\n  MATCH_MODE_STICKY: number\n  @CordovaProperty\n  CALLBACK_TYPE_ALL_MATCHES: number\n  @CordovaProperty\n  CALLBACK_TYPE_FIRST_MATCH: number\n  @CordovaProperty\n  CALLBACK_TYPE_MATCH_LOST: number\n\n  @Cordova({ sync: true })\n  bytesToEncodedString(bytes: Uint8Array): string {\n    return\n  }\n  @Cordova({ sync: true })\n  encodedStringToBytes(s: string): Uint8Array {\n    return\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}