{"version":3,"sources":["../../../../src/@ionic-native/plugins/ionic-native-bluetoothle/models/BlePluginParams.ts"],"names":[],"mappings":"AAoDA,yDAAyD;AACzD,uDAAuD;AACvD,MAAM,CAAN,IAAY,UAGX;AAHD,WAAY,UAAU;IACpB,gCAAkB,CAAA;IAClB,kCAAoB,CAAA;AACtB,CAAC,EAHW,UAAU,KAAV,UAAU,QAGrB;AAED,MAAM,CAAN,IAAY,eAGX;AAHD,WAAY,eAAe;IACzB,wCAAqB,CAAA;IACrB,wCAAqB,CAAA;AACvB,CAAC,EAHW,eAAe,KAAf,eAAe,QAG1B;AAED,MAAM,CAAN,IAAY,cAEX;AAFD,WAAY,cAAc;IACxB,sCAAoB,CAAA;AACtB,CAAC,EAFW,cAAc,KAAd,cAAc,QAEzB;AAED,MAAM,CAAN,IAAY,UAIX;AAJD,WAAY,UAAU;IACpB,+BAAiB,CAAA;IACjB,iCAAmB,CAAA;IACnB,mCAAqB,CAAA;AACvB,CAAC,EAJW,UAAU,KAAV,UAAU,QAIrB;AAED,MAAM,CAAN,IAAY,YAEX;AAFD,WAAY,YAAY;IACtB,qCAAqB,CAAA;AACvB,CAAC,EAFW,YAAY,KAAZ,YAAY,QAEvB;AAED,MAAM,CAAN,IAAY,aAGX;AAHD,WAAY,aAAa;IACvB,wCAAuB,CAAA;IACvB,8CAA6B,CAAA;AAC/B,CAAC,EAHW,aAAa,KAAb,aAAa,QAGxB;AAED,MAAM,CAAN,IAAY,gBAEX;AAFD,WAAY,gBAAgB;IAC1B,iDAA6B,CAAA;AAC/B,CAAC,EAFW,gBAAgB,KAAhB,gBAAgB,QAE3B;AAED,MAAM,CAAN,IAAY,WAEX;AAFD,WAAY,WAAW;IACrB,gCAAiB,CAAA;AACnB,CAAC,EAFW,WAAW,KAAX,WAAW,QAEtB;AAED,MAAM,CAAN,IAAY,aAEX;AAFD,WAAY,aAAa;IACvB,sCAAqB,CAAA;AACvB,CAAC,EAFW,aAAa,KAAb,aAAa,QAExB;AAED,MAAM,CAAN,IAAY,qBAEX;AAFD,WAAY,qBAAqB;IAC/B,4DAAmC,CAAA;AACrC,CAAC,EAFW,qBAAqB,KAArB,qBAAqB,QAEhC;AAED,MAAM,CAAN,IAAY,iBAEX;AAFD,WAAY,iBAAiB;IAC3B,gDAA2B,CAAA;AAC7B,CAAC,EAFW,iBAAiB,KAAjB,iBAAiB,QAE5B;AAED,MAAM,CAAN,IAAY,UAEX;AAFD,WAAY,UAAU;IACpB,2BAAa,CAAA;AACf,CAAC,EAFW,UAAU,KAAV,UAAU,QAErB;AAED,MAAM,CAAN,IAAY,eAGX;AAHD,WAAY,eAAe;IACzB,4CAAyB,CAAA;IACzB,8CAA2B,CAAA;AAC7B,CAAC,EAHW,eAAe,KAAf,eAAe,QAG1B;AAED,MAAM,CAAN,IAAY,iBAEX;AAFD,WAAY,iBAAiB;IAC3B,kDAA6B,CAAA;AAC/B,CAAC,EAFW,iBAAiB,KAAjB,iBAAiB,QAE5B;AAED,MAAM,CAAN,IAAY,WAEX;AAFD,WAAY,WAAW;IACrB,kCAAmB,CAAA;AACrB,CAAC,EAFW,WAAW,KAAX,WAAW,QAEtB","file":"BlePluginParams.js","sourceRoot":"","sourcesContent":["export interface InitParams {\n  request: boolean,\n  statusReceiver: boolean,\n  restoreKey: string,\n}\n\nexport interface ScanParams {\n  // iOS\n  allowDuplicates?: boolean,\n  // Android\n  matchNum?: number,\n  callbackType?: number,\n  scanMode?: number\n  // Both\n  services: string[]\n}\n\nexport interface RetrieveConnectedParams {\n  services: string[]\n}\n\nexport interface AddressParams {\n  address: string\n}\n\nexport interface ConnectParams {\n  address: string,\n  autoConnect?: boolean // Android\n}\n\nexport interface DiscoverParams {\n  address: string,\n  clearCache?: boolean // Android\n}\n\nexport interface ServicesDiscoverParams {\n  address: string,\n  services: string[]\n}\n\nexport interface CharacteristicsDiscoverParams {\n  address: string,\n  services: string,\n  characteristics: string[]\n}\n\nexport interface CharacteristicPath {\n  address: string,\n  service: string,\n  characteristic: string\n}\n\n// creating temporary enums to avoid ts compiler warning.\n// https://github.com/Microsoft/TypeScript/issues/10570\nexport enum InitStatus {\n  enable = 'enabled',\n  disable = 'disabled'\n}\n\nexport enum StartScanStatus {\n  start = 'scanStarted',\n  result = 'scanResult'\n}\n\nexport enum StopScanStatus {\n  stop = 'scanStopped'\n}\n\nexport enum BondStatus {\n  bonded = 'bonded',\n  bonding = 'bonding',\n  unbonded = 'unbonded'\n}\n\nexport enum UnbondStatus {\n  unbonded = 'unbonded'\n}\n\nexport enum ConnectStatus {\n  connected = 'connected',\n  disconnected = 'disconnected'\n}\n\nexport enum DisconnectStatus {\n  disconnected = 'disconnected'\n}\n\nexport enum CloseStatus {\n  closed = 'closed'\n}\n\nexport enum ServiceStatus {\n  services = 'services'\n}\n\nexport enum CharacteristicsStatus {\n  characteristics = 'characteristics'\n}\n\nexport enum DescriptorsStatus {\n  descriptors = 'descriptors'\n}\n\nexport enum ReadStatus {\n  read = 'read'\n}\n\nexport enum SubscribeStatus {\n  subscribed = 'subscribed',\n  result = 'subscribedResult'\n}\n\nexport enum UnsubscribeStatus {\n  unsubscribed = 'unsubscribed',\n}\n\nexport enum WriteStatus {\n  written = 'written'\n}\n"]}